SELECT *
FROM sales_data_sample;
SELECT SUM(SALES )
FROM sales_data_sample;
SELECT COUNT(DISTINCT ORDERNUMBER)
FROM sales_data_sample;
--NUMBER OF SALES ON EACH MONTH OF EACH YEAR
SELECT YEAR(orderdate) AS year_, MONTH(orderdate) AS month_, COUNT(DISTINCT ORDERNUMBER ) AS total_no_of_orders_placed
FROM sales_data_sample
GROUP BY YEAR(orderdate), MONTH(orderdate)
ORDER BY YEAR(orderdate), MONTH(orderdate)
--YEARLY SALES VS NUMBER OF ORDERS
SELECT  YEAR(ORDERDATE) AS year_ ,COUNT(distinct ORDERNUMBER) AS NO_OF_ORDERS,ROUND(SUM(SALES),2) AS YEARLY_SALES
FROM sales_data_sample
WHERE YEAR(ORDERDATE) !=2005
GROUP BY YEAR(ORDERDATE)
--QUARTERLY SALES DISTRIBUTION
SELECT quarter,SUM(monthly_sale) AS quarterly_sale
FROM (SELECT MONTH(ORderdate) AS month_, CASE WHEN MONTH(ORDERDATE) IN (1,2,3) THEN 'FIRST QUARTER'
WHEN MONTH(ORDERDATE) IN (4,5,6) THEN 'SECOND QUARTER'
WHEN MONTH(ORDERDATE) IN (7,8,9) THEN 'THIRD QUARTER'
ELSE 'FOURTH QUARTER' END AS quarter
,ROUND(SUM(SALES),2) AS monthly_sale 
FROM sales_data_sample
WHERE YEAR(ORDERDATE) !=2005
GROUP BY MONTH(ORDERDATE) )q
GROUP BY quarter
ORDER BY quarterly_sale DESC;
--HIGHEST  MONTH OF SALES
SELECT top 1 MONTH(ORDERDATE) AS month_ ,ROUND(SUM(SALES),2) AS monthly_sale 
FROM sales_data_sample
WHERE YEAR(ORDERDATE) !=2005
GROUP BY MONTH(ORDERDATE) 
ORDER BY SUM(SALES) DESC;
--LOWEST  MONTH OF SALES
SELECT top 1 MONTH(ORDERDATE) AS month_ ,ROUND(SUM(SALES),2) AS monthly_sale 
FROM sales_data_sample
GROUP BY MONTH(ORDERDATE) 
ORDER BY SUM(SALES) ASC;
--RUNNING SUM OF SALES WITH DATES	
With sd AS(SELECT CAST(ORDERDATE as date) AS dates_,ROUND(SUM(sales),2) AS daily_sale 
FROM sales_data_sample
WHERE YEAR(ORDERDATE) !=2005
GROUP BY ORDERDATE)
SELECT a.dates_,a.daily_sale,SUM(b.daily_sale ) AS cumlative_sale
FROM sd a JOIN sd b
ON a.dates_>=b.dates_
GROUP BY a.dates_,a.daily_sale
ORDER BY a.dates_ 
--countrywise sales
SELECT COUNTRY,ROUND(SUM(SALES),2) AS sales_countrywise
FROM sales_data_sample
GROUP BY COUNTRY

--productwise orders
select PRODUCTLINE,COUNT(*) AS no_of_items_ordered
FROM sales_data_sample
GROUP BY PRODUCTLINE
ORDER BY no_of_items_ordered ASC

--CUSTOMER ACQUISTION
WITH cust_sales AS(SELECT CONCAT( CUSTOMERNAME,'--',' ',substring(CONTACTFIRSTNAME,1,1),'.',CONTACTLASTNAME) AS CUSTOMER_DETAILS,count(DISTINCT ORDERNUMBER) AS NO_OF_TIMES_ORDERED,
ROUND(SUM(SALES),2) AS TOTAL_ORDER_AMOUNT
FROM sales_data_sample
GROUP BY CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME)
SELECT *,RANK() OVER(PARTITION BY (SELECT NULL) ORDER BY TOTAL_ORDER_AMOUNT DESC) AS rank_of_customer
FROM cust_sales ;
--CLASSIFICATION BETWEEN PREMIUM AND REGULAR CUSTOMERS(DEPENDING WHTHER TOTAL SALES IS ABOVE OR BELOW INR 100000)
SELECT CONCAT( CUSTOMERNAME,'--',' ',CONTACTFIRSTNAME,' ',CONTACTLASTNAME) AS CUSTOMER_DETAILS,ROUND(SUM(SALES),2) AS TOTAL_ORDER_AMOUNT,
CASE WHEN SUM(SALES)>=100000 THEN 'PREMIUM'
ELSE 'REGULAR' END AS TYPE_OF_CUSTOMER
FROM sales_data_sample
GROUP BY CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME
ORDER BY CUSTOMERNAME,CONTACTLASTNAME,CONTACTFIRSTNAME;

--minimum interval between two ORDERING FOR EACH CUSTOMER
WITH consecutive_order_list AS(SELECT CONCAT( CUSTOMERNAME,'--',' ',CONTACTFIRSTNAME,' ',CONTACTLASTNAME) AS CUSTOMER_DETAILS,ORDERDATE,
LAG(ORDERDATE,1) OVER(PARTITION BY CONCAT( CUSTOMERNAME,'--',' ',CONTACTFIRSTNAME,' ',CONTACTLASTNAME) 
ORDER BY CONCAT( CUSTOMERNAME,'--',' ',CONTACTFIRSTNAME,' ',CONTACTLASTNAME),ORDERDATE) AS PREVIOUS_ORDERDATE
FROM sales_data_sample
GROUP BY CONCAT( CUSTOMERNAME,'--',' ',CONTACTFIRSTNAME,' ',CONTACTLASTNAME),ORDERDATE),
day_diff_list AS(SELECT c.CUSTOMER_DETAILS, DATEDIFF(day,C.PREVIOUS_ORDERDATE,C.ORDERDATE) AS consecutive_differences
FROM consecutive_order_list c
WHERE c.PREVIOUS_ORDERDATE IS NOT NULL)
SELECT d.CUSTOMER_DETAILS,MIN(d.consecutive_differences) AS shortest_interval_in_days
FROM day_diff_list d
GROUP BY d.CUSTOMER_DETAILS;
--PRODUCTLINE IN WHICH MAXIMUM NUMBER OF A MODEL IS SOLD
WITH cte AS(SELECT  PRODUCTCODE, SUM(QUANTITYORDERED ) AS no_of_items_sold
FROM sales_data_sample
GROUP BY PRODUCTCODE)
SELECT SS.PRODUCTLINE,cte.PRODUCTCODE,cte.no_of_items_sold,ROUND(SUM(SALES),2) AS total_sales_made_by_the_model
FROM sales_data_sample ss JOIN cte
ON SS.PRODUCTCODE=cte.PRODUCTCODE
GROUP BY  SS.PRODUCTLINE, cte.PRODUCTCODE, cte.no_of_items_sold
ORDER BY cte.no_of_items_sold DESC;


